<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on </title>
    <link>https://wetw0rk.github.io/posts/</link>
    <description>Recent content in Posts on </description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 01 Dec 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://wetw0rk.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>0x00 - Introducción a Windows Kernel Explotación</title>
      <link>https://wetw0rk.github.io/posts/0x00-introducci%C3%B3n-a-windows-kernel-explotaci%C3%B3n/</link>
      <pubDate>Sun, 01 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://wetw0rk.github.io/posts/0x00-introducci%C3%B3n-a-windows-kernel-explotaci%C3%B3n/</guid>
      <description>Esta publicación será la primera de un series donde te guiaré al mundo de Windows Kernel Explotación. Mi papa antes dicia, &amp;ldquo;no se nace aprendido&amp;rdquo;. Como todo en la vida hay que empezar por algún lado. El objetivo de esta series es comenzar en Windows 7 (x86) y terminar en Windows 11 (x64). Hoy vamos usar Windows 7 (x86) y Windows 10 (x64).&#xA;Para empezar, baja estos programas:&#xA;Programa de Virtualización: Esto puede ser cualquier desde VirtualBox a VMWare.</description>
    </item>
    <item>
      <title>0x00 - Introduction to Windows Kernel Exploitation</title>
      <link>https://wetw0rk.github.io/posts/0x00-introduction-to-windows-kernel-exploitation/</link>
      <pubDate>Fri, 29 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://wetw0rk.github.io/posts/0x00-introduction-to-windows-kernel-exploitation/</guid>
      <description>This post will be the first of many in which I present you with a guide into the world of Windows Kernel Exploitation. As with anything in life, you must start somewhere and although we will be focusing on Windows 7 (x86) and Windows 10 (x64) for this post; we will ultimately be working our way up to Windows 11 (x64).&#xA;To get started, for this post you will need:</description>
    </item>
    <item>
      <title>La Rueda de Ezequiel (Análisis de la Puerta del Infierno)</title>
      <link>https://wetw0rk.github.io/posts/tronos/</link>
      <pubDate>Sun, 24 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://wetw0rk.github.io/posts/tronos/</guid>
      <description>Lo que sucede es mi análisis de la Puerta del Infierno, un código maligno. Este código maligno contiene técnicas que le da la capacidad de ejecutar llamadas de sistema (syscalls) en el sistema de operación Windows, con el objetivo de evadir detección de EDR (Defensas de las Empresas).&#xA;Una vez completé mi análisis, creé mi propia implementación en C++ que usa llamadas de sistema (syscalls) que pertenecer adrento de ntdll.dll. Además, un método diferente de lo conocido públicamente para crear hashes.</description>
    </item>
    <item>
      <title>Ezekiels Wheel (Hells Gate Analysis)</title>
      <link>https://wetw0rk.github.io/posts/ezekielswheel/ezekielswheel/</link>
      <pubDate>Sat, 23 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://wetw0rk.github.io/posts/ezekielswheel/ezekielswheel/</guid>
      <description>The following writeup is a my analysis of the Hells Gate malware. This malware strain contains a technique that performs syscalls on the Windows operating system in order to evade EDR detection.&#xA;Upon completion of my analysis, I developed my own implementation in C++ that uses existing syscall instructions within ntdll.dll and a custom hashing technique to evade the modern methods of detection for these types of techniques.&#xA;There are further optimizations that can be added to the technique, however for the sake of time, two PoC&amp;rsquo;s were developed.</description>
    </item>
  </channel>
</rss>
